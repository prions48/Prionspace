@using Prionspace.Data.Blog
@inject BlogService blogService
@inject ISnackbar Snackbar
@page "/blog/"
@page "/blog/{blogid}"
@page "/blog/{blogid}/{postid}"

@if (ThisPost != null && ThisBlog != null)
{
    <PostViewer Post="ThisPost" Editable="User != null && ThisBlog?.UserID == User.UserID" Blog="ThisBlog" />
}
else if (ThisBlog != null)
{
    <BlogViewer Blog="ThisBlog" />
}
else if (!string.IsNullOrEmpty(blogid))
{
    <MudText Typo="Typo.h3">No blog found matching this identifier.</MudText>
}
else if (!string.IsNullOrEmpty(postid))
{
    <MudText Typo="Typo.h3">No post found matching this identifier.</MudText>
}
else if (User != null)
{
    @if (User.IsValidUser)
    {
        <MudSimpleTable Striped Bordered>
            <thead>
                <tr>
                    <th>
                        My Blogs
                    </th>
                    <th>
                        Subtitle
                    </th>
                    <th>
                        # Posts
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (Blog blog in UserBlogs.OrderBy(e => e.CreatedTimeStamp))
                {
                    <tr>
                        <td>
                            <MudLink Href="@($"blog/{blog.BlogURL}")">@blog.BlogTitle</MudLink>
                        </td>
                        <td>
                            <MudText>@blog.BlogSubtitle</MudText>
                        </td>
                        <td>
                            <MudText>@blog.Posts.Count</MudText>
                        </td>
                    </tr>
                }
                @if (UserBlogs.Count < User.MaxBlogs)
                {
                    <tr>
                        @if (CreatingBlog)
                        {
                            <td>
                                <MudTextField @bind-Value="BlogTitle" Label="Title" />
                                <MudTextField @bind-Value="BlogSubtitle" Label="Subtitle" />
                                <MudTextField @bind-Value="BlogSlug" Label="Slug (for URL)" />
                                <MudText Color="@(ValidSlug == "valid" ? Color.Success : Color.Error)">@ValidSlug</MudText>
                            </td>
                            <td>
                                <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="CreateBlog" Disabled="@(ValidSlug != "valid")">Create</MudButton>
                                <MudButton Color="Color.Default" Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
                            </td>
                        }
                        else
                        {
                            <td colspan="2">
                                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="() => CreatingBlog = true">Create New Blog</MudButton>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    }
    else
    {
        <MudCard Elevation="2" Outlined Square>
            <MudCardHeader>Create Account</MudCardHeader>
            <MudCardContent>
                <MudTextField @bind-Value="NewName" Label="User Name" />
                <MudTextField @bind-Value="NewSlug" Label="URL Name" />
                <MudTextField @bind-Value="NewEmail" Label="Email Address" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="SaveUser"
                Disabled="string.IsNullOrEmpty(NewName) || string.IsNullOrEmpty(NewSlug) || string.IsNullOrEmpty(NewEmail)">Save Profile</MudButton>
            </MudCardActions>
        </MudCard>
    }
}
else
{
    <MudLink Color="Color.Dark" Href="Account/Login">Log in to start your own blogging journey!</MudLink>
}

@if (ThisBlog == null)
{
    <MudTable Items="BlogPostView" Striped Bordered Filter="new Func<BlogPostView,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Search Blogs & Posts</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Blog</MudTh>
            <MudTh>Post</MudTh>
            <MudTh>User</MudTh>
            <MudTh>Preview</MudTh>
            <MudTh>Categories</MudTh>
            <MudTh>Tags</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudLink Href="@($"blog/{context.BlogURL}")">@context.BlogTitle</MudLink>
            </MudTd>
            <MudTd>
                <MudLink Href="@($"blog/{context.BlogURL}/{context.PostURL}")">@context.PostTitle</MudLink>
            </MudTd>
            <MudTd>@context.UserName</MudTd>
            <MudTd>@context.PostBodyPreview</MudTd>
            <MudTd>@context.Categories?.Replace('|',',')</MudTd>
            <MudTd>@context.TagRecord?.Replace('|',',')</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [CascadingParameter] public BlogUser? User { get; set; }
    [Parameter] public string? blogid { get; set; }
    [Parameter] public string? postid { get; set; }
    private Guid loadedpost = Guid.Empty;
    private Guid loadedblog = Guid.Empty;
    private Guid userid = Guid.Empty;
    private Blog? ThisBlog { get; set; } = null;
    private BlogPost? ThisPost { get; set; } = null;
    private List<Blog> UserBlogs { get; set; } = [];
    private List<Blog> AllBlogs { get; set; } = [];
    private List<BlogPostView> BlogPostView { get; set; } = [];
    private string? NewName;
    private string? NewSlug;
    private string? NewEmail;
    private void SaveUser()
    {
        if (User != null)
        {
            User.UserSlug = NewSlug!;
            User.UserName = NewName!;
            User.UserEmail = NewEmail!;
            blogService.UpdateUser(User);
        }
    }
    protected override void OnInitialized()
    {
        BlogPostView = blogService.GetBlogPostView();
        AllBlogs = blogService.GetAllBlogs();
    }
    protected override void OnParametersSet()
    {
        if (User != null && userid != User.UserID)
        {
            UserBlogs = blogService.GetBlogsByUser(User.UserID);
            userid = User.UserID;
        }
        if (loadedpost != ThisPost?.ID || loadedblog != ThisBlog?.ID)
        {
            if (postid != null)
            {
                ThisPost = blogService.GetPostByURL(postid, User);
                if (ThisPost != null && !string.IsNullOrEmpty(blogid))
                {
                    ThisBlog = blogService.GetBlogByURL(blogid);
                    loadedpost = ThisPost.ID;
                    loadedblog = ThisBlog?.ID ?? Guid.Empty;
                }
            }
            else if (blogid != null)
            {
                ThisBlog = blogService.GetBlogByURL(blogid);
                loadedblog = ThisBlog?.ID ?? Guid.Empty;
            }
        }
    }
    bool CreatingBlog = false;
    private string BlogTitle = "";
    private string BlogSubtitle = "";
    private string BlogSlug = "";
    private void CreateBlog()
    {
        if (User != null)
        {
            Blog newblog = new Blog()
            {
                UserID = User.UserID,
                BlogTitle = BlogTitle,
                BlogSubtitle = BlogSubtitle,
                BlogSlug = BlogSlug
            };
            blogService.CreateBlog(newblog);
            UserBlogs.Add(newblog);
        }
    }
    private void Cancel()
    {
        CreatingBlog = false;
        BlogTitle = "";
        BlogSubtitle = "";
        BlogSlug = "";
    }
    private string ValidSlug
    {
        get
        {
            string s = BlogSlug;
            if (s.Length < 4)
                return "too short";
            if (s.Length > 20)
                return "too long";
            string S2 = s.ToUpper();
            for (int i = 0; i < s.Length; i++)
            {
                if (S2[i] < 'A' || S2[i] > 'Z')
                    return "invalid characters";
            }
            if (AllBlogs.Select(e => e.BlogSlug.ToUpper()).Contains(S2))
                return "that slug is taken";
            return "valid";
        }
    }
    private string? searchString1 = null;
    private bool FilterFunc1(BlogPostView view) => FilterFunc(view, searchString1);
    private bool FilterFunc(BlogPostView view, string? searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return false;
        if (view.BlogTitle?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (view.PostTitle?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (view.PostBody?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (view.UserName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (view.Categories?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (view.TagRecord?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        return false;
    }
}
