@using Prionspace.Components.Pages.Dialogs
@inject IDialogService dialogService
@inject BlogService blogService
@using Tizzani.MudBlazor.HtmlEditor
@inject NavigationManager navManager

<MudGrid>
    <MudItem xs="12" sm="12" md="6" lg="8" xl="10">
        <MudCard Elevation="1" Outlined>
            <MudCardHeader>
                @if (Editing)
                {
                    <MudTextField @bind-Value="EditTitle" Label="Title" Typo="Typo.h6" />
                }
                else
                {
                    <MudText Typo="Typo.h6">@Post.PostTitle</MudText>
                }
            </MudCardHeader>
            <MudCardContent>
                @if (Editing)
                {
                    <MudHtmlEditor @bind-Html="EditText" Outlined Resizable Placeholder="Write about something here!">
                        <MudHtmlToolbarOptions InsertImage="false" InsertLink="false" CodeBlock="false" />
                    </MudHtmlEditor>
                }
                else
                {
                    @Post.PostBodyHTML
                }
            </MudCardContent>
            <MudCardActions>
                @if (Editing)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Cancel">Cancel</MudButton>
                    @if (Post.Status == PostStatus.Draft)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="SaveProgress">Save Progress</MudButton>
                    }
                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Publish">Publish</MudButton>
                }
                else if (Editable)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Edit">Edit</MudButton>
                }
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="6" lg="4" xl="2">
        <MudCard Outlined>
            <MudCardContent>
                <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Start">
                    <MudLink Typo="Typo.h5" OnClick="BlogBack">@Blog.BlogTitle</MudLink>
                    <MudStack Row>
                        @if (Editing)
                        {
                            <MudMenu Label="Add Category">
                                @foreach (BlogCategory category in Blog.Categories.Where(e => !Post.Categories.Select(f => f.ID).Contains(e.ID)))
                                {
                                    <MudMenuItem OnClick="() => AddCategory(category)"><MudText Color="@category.Color">@category.CategoryName</MudText></MudMenuItem>
                                }
                            </MudMenu>
                        }
                        else
                        {
                            <MudText Typo="Typo.caption">Categories</MudText>
                        }
                        <MudChipSet T="BlogCategory" OnClose="DeleteCategory" AllClosable="Editing">
                            @foreach (BlogCategory category in Post.Categories)
                            {
                                <MudChip Value="category" Color="@category.Color" Text="@category.CategoryName" Variant="Variant.Filled" />
                            }
                        </MudChipSet>
                    </MudStack>
                    <MudStack Row>
                        @if (Editing)
                        {
                            <MudMenu Label="Add Tag">
                                @foreach (BlogTag tag in Blog.Tags)
                                {
                                    @if (!Post.Tags.Any(e => e == tag.TagTitle))
                                    {
                                        <MudMenuItem OnClick="() => AddTag(tag)">@tag.TagTitle</MudMenuItem>
                                    }
                                }
                                <MudMenuItem OnClick="CreateTag">Create New</MudMenuItem>
                            </MudMenu>
                        }
                        else
                        {
                            <MudText Typo="Typo.caption">Tags</MudText>
                        }
                        <MudChipSet T="string" OnClose="DeleteTag" AllClosable="Editing">
                            @foreach (string tag in Post.Tags.Where(e => !string.IsNullOrEmpty(e)))
                            {
                                <MudChip Text="@tag" Value="@tag" />
                            }
                        </MudChipSet>
                    </MudStack>
                </MudStack>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter] public BlogUser User { get; set; }
    [Parameter] public BlogPost Post { get; set; }
    [Parameter] public bool Editable { get; set; }
    [Parameter] public Blog Blog { get; set; }
    protected override void OnInitialized()
    {
        if (Post.Status == PostStatus.Draft)
            Edit();
    }
    private bool Editing { get; set; } = false;
    private string EditTitle = "";
    private string EditText = "";
    private void Cancel()
    {
        Editing = false;
        EditText = Post.PostBody;
        EditTitle = Post.PostTitle;
    }
    private void SaveProgress()
    {
        Post.PostBody = EditText;
        Post.PostTitle = EditTitle;
        blogService.UpdatePost(Post);
        Cancel();
    }
    private void Publish()
    {
        Post.PostBody = EditText;
        Post.PostTitle = EditTitle;
        Post.Status = PostStatus.Public;
        blogService.UpdatePost(Post);
        Cancel();
    }
    private void Edit()
    {
        EditText = Post.PostBody;
        EditTitle = Post.PostTitle;
        Editing = true;
    }
    BlogCategory? SelectedCategory = null;
    private void AddCategory(BlogCategory category)
    {
        BlogPostCategory newpc = new BlogPostCategory()
        {
            PostID = Post.ID,
            CategoryID = category.ID
        };
        blogService.CreatePostCategory(newpc);
        Post.Categories.Add(category);
        SelectedCategory = null;
    }
    private void DeleteCategory(MudChip<BlogCategory> chip)
    {
        if (chip.Value == null)
            return;
        BlogCategory? category = Post.Categories.FirstOrDefault(e => e.ID == chip.Value.ID);
        if (category != null)
        {
            Post.Categories.Remove(category);
            blogService.DeletePostCategory(Post.ID, category.ID);
        }
    }
    private void AddTag(BlogTag tag)
    {
        Post.TagRecord += "|" + tag.TagTitle;
        blogService.UpdatePost(Post);
    }
    private void DeleteTag(MudChip<string> chip)
    {
        if (chip.Value is string s)
        {
            Post.TagRecord = string.Join("|",Post.Tags.Where(e => e != s));
            blogService.UpdatePost(Post);
        }
    }
    private async Task CreateTag()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        var parameters = new DialogParameters();
        var dialog = dialogService.Show<TagCreator>("Create Tag", parameters, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            BlogTag? tag = result.Data as BlogTag;
            if (tag != null)
            {
                if (Blog.Tags.Any(e => e.TagTitle == tag.TagTitle))
                {
                    if (!Post.Tags.Any(e => e == tag.TagTitle))
                    {
                        Post.TagRecord += "|" + tag.TagTitle;
                    }
                }
                else
                {
                    tag.BlogID = Post.BlogID;
                    blogService.CreateTag(tag);
                    Post.TagRecord += "|" + tag.TagTitle;
                }
            }
        }
    }
    private void BlogBack()
    {
        navManager.NavigateTo($"blog/{Blog.BlogURL}", true);
    }
}