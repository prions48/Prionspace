@inject BlogService blogService
@inject NavigationManager navManager
@inject IDialogService dialogService
@using Prionspace.Components.Pages.Dialogs

@if (User?.UserID == Blog.UserID)
{
    <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="AddPost">Create New Post</MudButton>
}
<MudCard Elevation="2" Outlined>
    <MudCardHeader>@Blog.BlogTitle</MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.caption">@Blog.BlogSubtitle</MudText>
        <MudTable Items="Blog.Posts" Striped Bordered>
            <HeaderContent>
                <MudTh>Title</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<BlogPost, object>(x=>x.PostDate)" InitialDirection="SortDirection.Descending">Post Date</MudTableSortLabel></MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Content</MudTh>
                <MudTh>Nav</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudLink Href="@($"/blog/{Blog.BlogSlug}/{context.ID}")">@context.PostTitle</MudLink>
                </MudTd>
                <MudTd>@context.PostDate.ToString("MM/dd/yy")</MudTd>
                <MudTd>@context.Status</MudTd>
                <MudTd>@context.PostBodySlug</MudTd>
                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowOutward" Href="@($"/blog/{Blog.BlogURL}/{context.PostURL}")" />
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardHeader>Categories</MudCardHeader>
    <MudCardContent>
        <MudSimpleTable Striped>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Color</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (BlogCategory category in Blog.Categories)
                {
                    <tr>
                        <td>@category.CategoryName</td>
                        <td>
                            <MudChip Text="@category.Color.ToString()" Color="@category.Color" T="string" />
                        </td>
                        <td>
                            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" OnClick="() => DeleteCategory(category)" />
                        </td>
                    </tr>
                }
                @if (Blog.Categories.Count < 10)
                {
                    <tr>
                        <td colspan="3">
                            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="CreateCategory">Create New Category</MudButton>
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </MudCardContent>
</MudCard>

@code {
    [CascadingParameter] public BlogUser? User { get; set; }
    [Parameter] public Blog Blog { get; set; }
    private void AddPost()
    {
        BlogPost post = new BlogPost()
        {
            BlogID = Blog.ID,
            PostDate = DateTime.Now,
            PostUser = User!.UserName,
            Status = PostStatus.Draft
        };
        blogService.CreatePost(post);
        navManager.NavigateTo($"/blog/{Blog.BlogURL}/{post.ID}", true);
    }
    private void DeleteCategory(BlogCategory category)
    {
        Blog.Categories.Remove(category);
        blogService.DeleteCategory(category);
    }
    private async Task CreateCategory()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        var parameters = new DialogParameters();
        var dialog = dialogService.Show<CategoryCreator>("Create Category", parameters, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            BlogCategory? category = result.Data as BlogCategory;
            if (category != null)
            {
                category.BlogID = Blog.ID;
                blogService.CreateCategory(category);
                Blog.Categories.Add(category);
            }
        }
    }
}