@inject BlogService blogService
@inject NavigationManager navManager
@inject IDialogService dialogService
@using Prionspace.Components.Pages.Dialogs

<MudStack Row>
    @if (User?.UserID == Blog.UserID)
    {
        <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="AddPost">Create New Post</MudButton>
    }
    else
    {
        @if (User != null)
        {
            @if (User.Links.Select(e => e.BlogID).Contains(Blog.ID))
            {
                <MudButton StartIcon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Error" Variant="Variant.Outlined" OnClick="RemoveFav">Remove Favorite</MudButton>
            }
            else
            {
                <MudButton StartIcon="@Icons.Material.Filled.Favorite" Color="Color.Error" Variant="Variant.Filled" OnClick="AddFav">Add Favorite</MudButton>
            }
        }
    }
    <MudButton StartIcon="@Icons.Material.Filled.Home" Variant="Variant.Filled" Color="Color.Default" OnClick="HomeButton">Home</MudButton>
</MudStack>
<MudCard Elevation="2" Outlined>
    <MudCardHeader>
        <MudText Typo="Typo.h3">@Blog.BlogTitle</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.h6"><i>@Blog.BlogSubtitle</i></MudText>
        <MudTable Items="Blog.Posts" Striped Bordered>
            <HeaderContent>
                <MudTh>Title</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<BlogPost, object>(x=>x.PostDate)" InitialDirection="SortDirection.Descending">Post Date</MudTableSortLabel></MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Categories</MudTh>
                <MudTh>Content</MudTh>
                <MudTh>Nav</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudLink Href="@($"blog/{Blog.BlogSlug}/{context.ID}")">@context.PostTitle</MudLink>
                </MudTd>
                <MudTd>@context.PostDate.ToString("MM/dd/yy")</MudTd>
                <MudTd>@context.Status</MudTd>
                <MudTd>
                    <MudChipSet AllClosable="false" T="BlogCategory">
                        @foreach (BlogCategory category in context.Categories)
                        {
                            <MudChip Color="@category.Color">@category.CategoryName</MudChip>
                        }
                    </MudChipSet>
                </MudTd>
                <MudTd>@context.PostBodyPreview</MudTd>
                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowOutward" Href="@($"blog/{Blog.BlogURL}/{context.PostURL}")" />
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

@if (User?.UserID == Blog.UserID)
{
    <MudGrid>
        <MudItem xs="12" sm="12" md="6" lg="6" xl="4">
            <MudCard Elevation="1" Outlined>
                <MudCardHeader>Categories</MudCardHeader>
                <MudCardContent>
                    <MudSimpleTable Striped>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Color</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (BlogCategory category in Blog.Categories)
                            {
                                <tr>
                                    <td>@category.CategoryName</td>
                                    <td>
                                        <MudChip Text="@category.Color.ColorName()" Color="@category.Color" T="string" />
                                    </td>
                                    <td>
                                        <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" OnClick="() => DeleteCategory(category)" />
                                    </td>
                                </tr>
                            }
                            @if (Blog.Categories.Count < 10)
                            {
                                <tr>
                                    <td colspan="3">
                                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="CreateCategory">Create New Category</MudButton>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" md="6" lg="6" xl="8">
            <MudGrid>
                <MudItem xs="12" sm="12" md="6" lg="6" xl="6">
                    <MudCard Elevation="1" Outlined>
                        <MudCardHeader>Tags</MudCardHeader>
                        <MudCardContent>
                            <MudButton OnClick="AddTag" Variant="Variant.Filled" Color="Color.Info">Add Tag</MudButton>
                            <MudChipSet T="BlogTag" OnClose="DeleteTag">
                                @foreach (BlogTag tag in Blog.Tags)
                                {
                                    <MudChip Text="@tag.TagTitle" Value="tag" />
                                }
                            </MudChipSet>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="6" xl="6">
                    <MudCard>
                        <MudCardHeader>Settings</MudCardHeader>
                        <MudCardContent>
                            <MudTextField @bind-Value="Blog.BlogSubtitle" />
                            <MudCheckBox @bind-Value="Blog.PublicBlog">Public</MudCheckBox>
                            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Save">Save</MudButton>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
}



@code {
    [CascadingParameter] public BlogUser? User { get; set; }
    [Parameter] public Blog Blog { get; set; }
    private void HomeButton()
    {
        navManager.NavigateTo("blog", true);
    }
    private void AddPost()
    {
        BlogPost post = new BlogPost()
        {
            BlogID = Blog.ID,
            PostDate = DateTime.Now,
            PostUser = User!.UserName,
            Status = PostStatus.Draft
        };
        blogService.CreatePost(post);
        navManager.NavigateTo($"blog/{Blog.BlogURL}/{post.ID}", true);
    }
    private void DeleteCategory(BlogCategory category)
    {
        Blog.Categories.Remove(category);
        blogService.DeleteCategory(category);
    }
    private async Task CreateCategory()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        var parameters = new DialogParameters();
        var dialog = dialogService.Show<CategoryCreator>("Create Category", parameters, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            BlogCategory? category = result.Data as BlogCategory;
            if (category != null)
            {
                category.BlogID = Blog.ID;
                blogService.CreateCategory(category);
                Blog.Categories.Add(category);
            }
        }
    }
    private async Task AddTag()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        var parameters = new DialogParameters();
        var dialog = dialogService.Show<TagCreator>("Create Tag", parameters, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            BlogTag? tag = result.Data as BlogTag;
            if (tag != null)
            {
                tag.BlogID = Blog.ID;
                blogService.CreateTag(tag);
                Blog.Tags.Add(tag);
            }
        }
    }
    private void DeleteTag(MudChip<BlogTag> chip)
    {
        BlogTag? tag = chip.Value as BlogTag;
        if (tag != null)
        {
            Blog.Tags.Remove(tag);
            blogService.DeleteTag(tag);
        }
    }
    private void AddFav()
    {
        if (User == null)
            return;
        BlogLink link = new BlogLink()
        {
            UserID = User.UserID,
            BlogID = Blog.ID,
            BlogSlug = Blog.BlogSlug,
            LinkName = Blog.BlogTitle,
            OwnBlog = false
        };
        blogService.CreateLink(link);
        User.Links.Add(link);
    }
    private void RemoveFav()
    {
        BlogLink? link = User?.Links.FirstOrDefault(e => e.BlogID == Blog.ID);
        if (link != null)
        {
            blogService.DeleteLink(link);
            User!.Links.Remove(link);
        }
    }
    private void Save()
    {
        blogService.UpdateBlog(Blog);
    }
}